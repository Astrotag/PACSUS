package pacsus.main.ui;

import java.util.Observable;

import pacsus.main.utility.Date;

/* Generated by Together */

/**
 * This class holds key control information for the operation of the barrier
 * system.
 *
 * It extends Observable, and notifies its observers whenever either the date
 * changes (caused by the Timer class), or the barrier system activity status
 * changes (caused by an instance of the Campus security class), or the barrier
 * event log changes (caused by an instance of the Barrier class).
 *
 * There will only be one instance of this class.
 */

public class System_status extends Observable
{
    /**
     * This attribute is the central indication of the activity status of the whole
     * barrier system. It is set/unset by messages from instances of the Campus
     * security class.
     */
    private boolean systemActive = false;

    /**
     * An array of strings showing recent attempts to pass through the barriers
     * (both successful and unsuccessful). The last 20 should be enough? These are
     * intended for display on the Campus_security screens.
     */
    private String[] log = new String[20];

    /**
     * This attribute is kept up to date by the Timer.
     * 
     * @clientCardinality 1
     * @supplierCardinality 1
     * @link aggregation
     * @label Contains
     * @directed
     */
    private Date today = new Date();

    /**
     * A simple method to get a String value for systems active status
     * 
     * @return String for boolean value
     */
    public String getSystemActive()
    {
	return systemActive ? "Active" : "Deactivated";
    }

    /**
     * A method to get the boolean value of the systems active status
     * 
     * @return String for boolean value
     */
    public boolean getSystemStatus()
    {
	return systemActive ? true : false;
    }

    /**
     * A method to set the systems active status
     * 
     * @param true/false - value to set the system status
     */
    public void setSystemActive(boolean status)
    {
	this.systemActive = status;
	setChanged();
	notifyObservers();
    }

    /**
     * A method called to notify the observers of a change of the date using the MVC
     * model
     */
    public void nextDay()
    {
	today.increment();
	setChanged();
	notifyObservers();
    }

    /**
     * A method which flags that the data has in some way been changed which allows
     * different views to update their lists.
     */
    public void dataChanged()
    {
	setChanged();
	notifyObservers();
    }

    /**
     * Returns the current date
     * 
     * @return the current date
     */
    public Date getDate()
    {
	return today;
    }

    /**
     * returns the log of vehicles which have attempted to enter, or have entered.
     * 
     * @return an array of strings provided by the permits
     */
    public String[] getLog()
    {
	if (systemActive)
	    return log;
	else
	    return null;
    }

    /**
     * A method to add a new entry or attempt into the log for viewing.
     * 
     * @param entry - the string to be entered into the log
     */
    public void addEntryLog(String entry)
    {

	if (systemActive)
	{

	    for (int i = 0; i < log.length; i++)
	    {
		if (log[i] == null)
		{
		    log[i] = entry;
		    break;
		}
		// if(log[i]==20)
	    }
	}
    }

    /**
     * Method to reset the log at the turn of the year.
     */
    public void resetEntryLog()
    {
	for (int i = 0; i < log.length; i++)
	{
	    log[i] = "";
	}

    }
}
