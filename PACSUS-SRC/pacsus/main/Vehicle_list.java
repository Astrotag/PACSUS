package pacsus.main;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Locale;

/* Generated by Together */

/**
 * Vehicle list manages the collection of vehicles currently associated with
 * permits. It handles checks of whether vehicles are allowed through the
 * barriers, records warnings, and various other functions. Note that each
 * Vehicle_info object must have a unique registration number, to allow sensible
 * checking and recording of entries onto the campus (so a HashTable is probably
 * a good implementation of the collection, with registration number as key).
 *
 * There will only be one instance of this class.
 */
public class Vehicle_list
{
    /**
     * The Vehicle list maintains a collection of the known Vehicle_infos associated
     * with all permits. This association must be implemented by an attribute
     * holding a collection data structure (for example: array, hash table - the
     * latter is recommended).
     *
     * Note that no two Vehicle_infos may have the same registration number (this
     * information is not represented diagrammatically) - this is to guarantee
     * consistency with the constraint that no vehicle is associated with more than
     * one permit.
     *
     * Note that, given a registration number, the Vehicle_list can look up the
     * appropriate Vehicle_info instance, and via that it can obtain the vehicle's
     * permit information.
     * 
     * @associates Vehicle_info
     * @label Contains
     * @clientCardinality 1
     * @supplierCardinality 0..*
     * @directed
     */
    private java.util.Hashtable<String, Vehicle_info> lnkVehicle;

    /*
     * Vehicle List constructor
     */
    public Vehicle_list()
    {
	lnkVehicle = new Hashtable<String, Vehicle_info>();
    }

    /**
     * A method which adds vehicles to the {@link #Hashtable}
     * 
     * @param reg - Registration for the vehicle used as the key
     * @param vh  - The Vehicle_info class associated with the Registration.
     * 
     * @return true/false - If the new vehicle was created
     */
    public boolean add(String reg, Vehicle_info vh)
    {
	if (!lnkVehicle.containsValue(reg))
	{
	    lnkVehicle.put(reg, vh);
	    
	    return true;

	}
	else
	{
	    
	    return false;
	}
    }

    /**
     * A method which allows other classes to check for newest version of the list
     * 
     * @return - {@link #Hashtable} of vehicles
     */
    public Hashtable<String, Vehicle_info> updateList()
    {
	return this.lnkVehicle;
    }

    /**
     * Returns if the vehicle exists in the collection
     * 
     * @param regNo - The reg of the vehicle to find
     * 
     * @return true/false if the vehicle exists
     */
    public boolean findVehicle(String regNo)
    {
	regNo = regNo.trim();
	regNo = regNo.toUpperCase(Locale.ROOT);
	return lnkVehicle.get(regNo) != null;
    }

    /**
     * A method to return the collection as an ArrayList
     * 
     * @return the keyset of the collection as an ArrayList
     */
    public ArrayList<String> getRegs()
    {
	// returned directly instead of making a variable.
	return new ArrayList<>(lnkVehicle.keySet());
    }

    @Override
    public String toString()
    {
	return "Vehicle_list [lnkVehicle=" + lnkVehicle + "]";
    }

    /**
     * Returns the permit associated with the vehicles registration
     * 
     * @param regNo - The reg of the permit to find
     * 
     * @return a permit
     */
    public Permit getVehiclePermit(String regNo)
    {
	// System.err.println(lnkVehicle.get(regNo).getPermit().toString());
	return lnkVehicle.get(regNo).getPermit();
    }

    /**
     * Removes a value from the hashtable with a key
     * 
     * @param key Name of the Permit holder
     * @return True: if the value has been removed. False: if it hasn't.
     */
    public boolean deleteVehicle(String key)
    {
	if (lnkVehicle.remove(key) != null)
	{
	    
	    return true;
	}
	return false;
    }

}