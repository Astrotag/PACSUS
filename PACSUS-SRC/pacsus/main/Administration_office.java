package pacsus.main;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.LayoutManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

/* Generated by Together */

/**
 * This class represents the interactive interface to PACSUS administration
 * functions carried out in the Estates and Campus Services Office. Information
 * about these functions is in the Administration use case diagram (hyperlinked
 * from this class).
 *
 * The interface comprises one screen with all the functions present on it: they
 * could all be on view at once, or perhaps in alternative JPanels (in a JFrame
 * with JTabbedPane); the current date (day number) is always displayed.
 *
 * There could be any number of instances of this class, potentially one for
 * each workstation in the office, with different staff carrying different
 * functions.
 *
 * The class implements Observer, and observes the system status so that it can
 * keep the displayed current date correct.
 * 
 * @stereotype boundary
 */
public class Administration_office extends JFrame implements Observer, ActionListener
{
    /**
     * Each instance of Administration_office has a navigable association to the
     * permit list so that it can enquire about/add/delete/modify permits.
     * 
     * @supplierCardinality 1
     * @clientCardinality 1..*
     * @label Administration functions
     * @directed
     */
    private Permit_list lnkPermit_list;

    /**
     * Each instance of Administration_office has a navigable association to the
     * vehicle list so that it can enquire about/add/delete/modify vehicle details.
     * 
     * @clientCardinality 1..*
     * @supplierCardinality 1
     * @label Administration functions
     * @directed
     */
    private Vehicle_list lnkVehicle_list;

    /**
     * Each instance of Administration_office has a navigable association to the
     * system status so that it can find out status information about the system.
     * 
     * @clientCardinality 1..*
     * @supplierCardinality 1
     * @label See date
     * @directed
     */
    private System_status lnkSystem_status;
    
    private JButton newPermitButton, warningButton, unsuspendButton, cancelButton, editButton; 

    /**
     * Generated Constructor
     * 
     * @param systemStatus
     * @param vehicleList
     * @param permitList
     */
    public Administration_office(System_status systemStatus, Vehicle_list vehicleList, Permit_list permitList)
    {
	this.lnkVehicle_list = vehicleList;
	this.lnkSystem_status = systemStatus;
	this.lnkPermit_list = permitList;

	//Grid layout for the left panel
	GridLayout gridLayout = new GridLayout(5, 1);
	
	JPanel left = new JPanel();
	left.setLayout(gridLayout);
	
	JPanel right = new JPanel();
	
	setTitle("Administration Office");
	setLocation(40, 150);
	setSize(350, 150);
	setDefaultCloseOperation(EXIT_ON_CLOSE);
	Container window = getContentPane();
	window.setLayout(new FlowLayout()); // The default is that JFrame uses BorderLayout

	// Set up view GUI
	setBackground(Color.white);
	JLabel label = new JLabel();

	newPermitButton = new JButton("New Permit");
	left.add(newPermitButton);
	newPermitButton.addActionListener(this);
	
	warningButton = new JButton("Issue Warning");
	left.add(warningButton);
	warningButton.addActionListener(this);
	
	unsuspendButton = new JButton("Unsuspend Permit");
	left.add(unsuspendButton);
	unsuspendButton.addActionListener(this);
	
	cancelButton = new JButton("Cancel Permit");
	left.add(cancelButton);
	cancelButton.addActionListener(this);
	
	editButton = new JButton("Edit");
	left.add(editButton);
	editButton.addActionListener(this);
	
	JSplitPane splitPane = new JSplitPane(SwingConstants.VERTICAL, left, right);
	add(splitPane);
	
	label.setText("Date: " + "0");;//TODO systemStatus.getToday();
	add(label);
	setSize(300, 300);

	setVisible(true);
    }

    @Override
    public void update(Observable o, Object arg)
    {
	// TODO Auto-generated method stub

    }

   
    @Override
    public void actionPerformed(ActionEvent e)
    {
	if (e.getSource().equals(newPermitButton))
	{
	    System.out.println("Clicked New Permit");
	}
	
	if (e.getSource().equals(warningButton))
	{
	    System.out.println("Issue Warning Button clicked");
	}
	
	if (e.getSource().equals(unsuspendButton))
	{
	    System.out.println("Unsuspend Permit Button clicked");
	}
	
	if (e.getSource().equals(cancelButton))
	{
	    System.out.println("Cancel Button clicked");
	}
	
	if (e.getSource().equals(editButton))
	{
	    System.out.println("Edit Button clicked");
	}	
    }
}
