package pacsus.main;

import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

import javax.swing.AbstractButton;
import javax.swing.BoxLayout;
import javax.swing.ComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

/* Generated by Together */

/**
 * This class represents the interactive interface to PACSUS administration
 * functions carried out in the Estates and Campus Services Office. Information
 * about these functions is in the Administration use case diagram (hyperlinked
 * from this class).
 *
 * The interface comprises one screen with all the functions present on it: they
 * could all be on view at once, or perhaps in alternative JPanels (in a JFrame
 * with JTabbedPane); the current date (day number) is always displayed.
 *
 * There could be any number of instances of this class, potentially one for
 * each workstation in the office, with different staff carrying different
 * functions.
 *
 * The class implements Observer, and observes the system status so that it can
 * keep the displayed current date correct.
 * 
 * @stereotype boundary
 */
public class Administration_office extends JFrame implements Observer, ActionListener
{
    /**
     * Each instance of Administration_office has a navigable association to the
     * permit list so that it can enquire about/add/delete/modify permits.
     * 
     * @supplierCardinality 1
     * @clientCardinality 1..*
     * @label Administration functions
     * @directed
     */
    private Permit_list lnkPermit_list;

    /**
     * Each instance of Administration_office has a navigable association to the
     * vehicle list so that it can enquire about/add/delete/modify vehicle details.
     * 
     * @clientCardinality 1..*
     * @supplierCardinality 1
     * @label Administration functions
     * @directed
     */
    private Vehicle_list lnkVehicle_list;

    /**
     * Each instance of Administration_office has a navigable association to the
     * system status so that it can find out status information about the system.
     * 
     * @clientCardinality 1..*
     * @supplierCardinality 1
     * @label See date
     * @directed
     */
    private System_status lnkSystem_status;

    private JButton newPermitButton, warningButton, unsuspendButton, cancelButton, editButton;

    /**
     * Generated Constructor
     * 
     * @param systemStatus
     * @param vehicleList
     * @param permitList
     */

//    private ChoicePane choicePane;
//    private PermitDialog permitDialog;
//    private JLabel label = new JLabel();

    private JComboBox permitTypes, allPermits;

    private JTextField txtYourName, txtRegNo, txtIssueDate, txtEndDate, txtVisitingDate;
    private JLabel lblYourName, lblRegNo, lblIssueDate, lblVisiting, lblEndDate, lblPermitTypes, lblAllPermits;

    public Administration_office(System_status systemStatus, Vehicle_list vehicleList, Permit_list permitList)
    {
	this.lnkVehicle_list = vehicleList;
	this.lnkSystem_status = systemStatus;
	this.lnkPermit_list = permitList;
//	choicePane = new ChoicePane();
//	permitDialog = new PermitDialog(lnkPermit_list, lnkVehicle_list);

	lnkSystem_status.addObserver(this);

	loadGUI();
    }

    private void loadGUI()
    {
	setDefaultCloseOperation(EXIT_ON_CLOSE);
	setTitle(1);

	JTabbedPane tabbedPane = new JTabbedPane();

	JPanel newPermitPanel = createPermitPanel();

	JPanel warningPanel = createWarningPanel();

	JPanel unsuspendPanel = createSuspendedPanel();

	JPanel cancelPermit = createCancelPanel();

	JPanel editPanel = createEditPermitPanel();

	tabbedPane.addTab("New Permit", newPermitPanel);
	tabbedPane.addTab("Issue Warning", warningPanel);
	tabbedPane.addTab("Unsuspend Permit", unsuspendPanel);
	tabbedPane.addTab("Cancel Permit", cancelPermit);
	tabbedPane.addTab("Edit Permit", editPanel);

	add(tabbedPane);
	setSize(600, 300);

	setVisible(true);
    }

    /**
     * Creates the UI elements for the Edit panel
     * 
     * @return - JPanel for Edit
     */
    private JPanel createEditPermitPanel()
    {
	JPanel editPanel = new JPanel();
	editButton = new JButton("Edit");
	editPanel.add(editButton);
	editButton.addActionListener(this);
	return editPanel;
    }

    /**
     * Creates the UI elements for the Cancel panel
     * 
     * @return - JPanel for Cancel
     */
    private JPanel createCancelPanel()
    {
	JPanel cancelPermit = new JPanel();
	cancelButton = new JButton("Cancel Permit");
	cancelPermit.add(cancelButton);
	cancelButton.addActionListener(this);
	return cancelPermit;
    }

    /**
     * Creates the UI elements for the Suspended panel
     * 
     * @return - JPanel for unsuspend
     */
    private JPanel createSuspendedPanel()
    {
	JPanel unsuspendPanel = new JPanel();
	unsuspendButton = new JButton("Unsuspend Permit");
	unsuspendPanel.add(unsuspendButton);
	unsuspendButton.addActionListener(this);
	return unsuspendPanel;
    }

    /**
     * Creates the UI elements for the warning panel
     * 
     * @return - JPanel for warning
     */
    private JPanel createWarningPanel()
    {
	JPanel warningPanel = new JPanel();
	GridBagLayout gbl = new GridBagLayout();
	warningPanel.setLayout(gbl);

	GridBagConstraints gbc = new GridBagConstraints();
	gbc.fill = GridBagConstraints.HORIZONTAL;
	gbc.gridx = 0;
	gbc.gridy = 0;

	lblAllPermits = new JLabel("All Current Permits: ");
	warningPanel.add(lblAllPermits, gbc);

	gbc.gridx = 1;
	gbc.gridy = 0;
	allPermits = new JComboBox<String>();
	warningPanel.add(allPermits, gbc);

	gbc.gridx = 1;
	gbc.gridy = 1;
	warningButton = new JButton("Issue Warning");
	warningPanel.add(warningButton, gbc);
	warningButton.addActionListener(this);
	return warningPanel;
    }

    /**
     * Creates the UI elements for the create permit panel
     * 
     * @return - JPanel for creating a permit
     * @return
     */
    private JPanel createPermitPanel()
    {
	JPanel newPermitPanel = new JPanel();
	GridBagLayout gbl = new GridBagLayout();
	newPermitPanel.setLayout(gbl);

	GridBagConstraints gbc = new GridBagConstraints();
	gbc.fill = GridBagConstraints.HORIZONTAL;
	gbc.gridx = 0;
	gbc.gridy = 0;

	lblPermitTypes = new JLabel("Permit Types: ");
	newPermitPanel.add(lblPermitTypes, gbc);
	permitTypes = new JComboBox<String>(new String[]
	{ "Day Permit", "Permanent Vistior", "Regular Vistor", "University Member" });

	gbc.gridx = 1;
	gbc.gridy = 0;
	newPermitPanel.add(permitTypes, gbc);

	gbc.gridx = 0;
	gbc.gridy = 1;
	lblYourName = new JLabel("Name: ");
	newPermitPanel.add(lblYourName, gbc);

	gbc.gridx = 1;
	gbc.gridy = 1;
	txtYourName = new JTextField();
	newPermitPanel.add(txtYourName, gbc);

	gbc.gridx = 0;
	gbc.gridy = 2;
	lblRegNo = new JLabel("Registration No: ");
	newPermitPanel.add(lblRegNo, gbc);

	gbc.gridx = 1;
	gbc.gridy = 2;
	txtRegNo = new JTextField();
	newPermitPanel.add(txtRegNo, gbc);

	gbc.gridx = 0;
	gbc.gridy = 3;
	lblIssueDate = new JLabel("Date Issued: ");
	newPermitPanel.add(lblIssueDate, gbc);

	gbc.gridx = 1;
	gbc.gridy = 3;
	txtIssueDate = new JTextField();
	newPermitPanel.add(txtIssueDate, gbc);

	gbc.gridx = 0;
	gbc.gridy = 4;
	lblEndDate = new JLabel("End Date: ");
	newPermitPanel.add(lblEndDate, gbc);

	gbc.gridx = 1;
	gbc.gridy = 4;
	txtEndDate = new JTextField();
	newPermitPanel.add(txtEndDate, gbc);

	gbc.gridx = 0;
	gbc.gridy = 5;
	lblVisiting = new JLabel("Visiting Date: ");
	newPermitPanel.add(lblVisiting, gbc);

	gbc.gridx = 1;
	gbc.gridy = 5;
	txtVisitingDate = new JTextField();
	newPermitPanel.add(txtVisitingDate, gbc);

	gbc.gridx = 1;
	gbc.gridy = 6;
	newPermitButton = new JButton("New Permit");
	newPermitPanel.add(newPermitButton, gbc);
	newPermitButton.addActionListener(this);

	return newPermitPanel;
    }

    /**
     * TODO
     * 
     * @param date
     */
    private void setTitle(int date)
    {
	setTitle("Administration Office: Date - " + date);
    }

    @Override
    public void update(Observable o, Object arg)
    {
	int date = lnkSystem_status.getDate().getDayNumber();
	setTitle(date);
    }

    /**
     * TODO
     */
    private void getDialog()
    {
	int permitType = permitTypes.getSelectedIndex();

	switch (permitType)
	{

	case 0:

	    Day_visitor_permit dvp = new Day_visitor_permit(txtYourName.getText(), new Vehicle_info(txtRegNo.getText()),
		    txtVisitingDate.getText(), new Date(Integer.parseInt(txtIssueDate.getText())));

	    if (lnkPermit_list.add(txtYourName.getText(), dvp))
	    {

		JOptionPane.showMessageDialog(null, "permit added successfully", "success",
			JOptionPane.INFORMATION_MESSAGE);
	    }
	    else
		JOptionPane.showMessageDialog(null, "error adding permit", "error", JOptionPane.ERROR_MESSAGE);

	    addToVehicleList(txtYourName.getText(), new Vehicle_info(txtRegNo.getText()));

	    break;

	case 1:

	    University_member_permit ump = new University_member_permit(txtYourName.getText(),
		    new Vehicle_info(txtRegNo.getText()), new Date(Integer.parseInt(txtIssueDate.getText())));

	    if (lnkPermit_list.add(txtYourName.getText(), ump))
	    {

		JOptionPane.showMessageDialog(null, "permit added successfully", "success",
			JOptionPane.INFORMATION_MESSAGE);
	    }
	    else
		JOptionPane.showMessageDialog(null, "error adding permit", "error", JOptionPane.ERROR_MESSAGE);

	    addToVehicleList(txtYourName.getText(), new Vehicle_info(txtRegNo.getText()));

	    break;

	case 2:

	    Regular_visitor_permit rvm = new Regular_visitor_permit(txtYourName.getText(),
		    new Vehicle_info(txtRegNo.getText()), txtVisitingDate.getText(),
		    new Date(Integer.parseInt(txtIssueDate.getText())),
		    new Date(Integer.parseInt(txtEndDate.getText())));

	    if (lnkPermit_list.add(txtYourName.getText(), rvm))
	    {

		JOptionPane.showMessageDialog(null, "permit added successfully", "success",
			JOptionPane.INFORMATION_MESSAGE);
	    }
	    else
		JOptionPane.showMessageDialog(null, "error adding permit", "error", JOptionPane.ERROR_MESSAGE);

	    addToVehicleList(txtYourName.getText(), new Vehicle_info(txtRegNo.getText()));

	    break;

	case 3:
	    Permanent_visitor_permit pvp = new Permanent_visitor_permit(txtYourName.getText(),
		    new Vehicle_info(txtRegNo.getText()));

	    if (lnkPermit_list.add(txtYourName.getText(), pvp))
	    {

		JOptionPane.showMessageDialog(null, "permit added successfully", "success",
			JOptionPane.INFORMATION_MESSAGE);
	    }
	    else
		JOptionPane.showMessageDialog(null, "error adding permit", "error", JOptionPane.ERROR_MESSAGE);

	    addToVehicleList(txtYourName.getText(), new Vehicle_info(txtRegNo.getText()));

	    break;

	}
    }

    /**
     * TODO - Niall
     * 
     * @param text
     * @param vehicle_info
     */
    private void addToVehicleList(String name, Vehicle_info vehicle_info)
    {
	if (vehicle_info.toString().contains(","))
	{
	    int commaoccurs = -1;
	    for (int i = 0; i < vehicle_info.toString().length(); i++)
	    {

		if (vehicle_info.toString().charAt(i) == ',')
		{
		    Vehicle_info vh = new Vehicle_info(vehicle_info.toString().substring(commaoccurs + 1, i));
		    System.out.println("Vehicle: " + vh + " Name: " + name);
		    lnkVehicle_list.add(vh, name);
		    commaoccurs = i;
		}
	    }

	    Vehicle_info vh = new Vehicle_info(vehicle_info.toString().substring(commaoccurs + 1));
	    System.out.println("Vehicle: " + vh + " Name: " + name);
	    lnkVehicle_list.add(vh, name);
	}
    }

    @Override
    public void actionPerformed(ActionEvent e)
    {
	if (e.getSource().equals(newPermitButton))
	{
	    getDialog();
	}
	
	if (e.getSource().equals(warningButton))
	{
	    
	}
	
	if (e.getSource().equals(unsuspendButton))

	{

	}

	if (e.getSource().equals(cancelButton))
	{

	}

	if (e.getSource().equals(editButton))
	{

	}
    }
}
